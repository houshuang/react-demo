{"id":"../node_modules/ot-json0/lib/bootstrapTransform.js","dependencies":[{"name":"/Users/stian/minerva/sle/react-demo/package.json","includedInParent":true,"mtime":1555242221333},{"name":"/Users/stian/minerva/sle/react-demo/node_modules/ot-json0/package.json","includedInParent":true,"mtime":1555241436185}],"generated":{"js":"// These methods let you build a transform function from a transformComponent\n// function for OT types like JSON0 in which operations are lists of components\n// and transforming them requires N^2 work. I find it kind of nasty that I need\n// this, but I'm not really sure what a better solution is. Maybe I should do\n// this automatically to types that don't have a compose function defined.\n\n// Add transform and transformX functions for an OT type which has\n// transformComponent defined.  transformComponent(destination array,\n// component, other component, side)\nmodule.exports = bootstrapTransform\nfunction bootstrapTransform(type, transformComponent, checkValidOp, append) {\n  var transformComponentX = function(left, right, destLeft, destRight) {\n    transformComponent(destLeft, left, right, 'left');\n    transformComponent(destRight, right, left, 'right');\n  };\n\n  var transformX = type.transformX = function(leftOp, rightOp) {\n    checkValidOp(leftOp);\n    checkValidOp(rightOp);\n    var newRightOp = [];\n\n    for (var i = 0; i < rightOp.length; i++) {\n      var rightComponent = rightOp[i];\n\n      // Generate newLeftOp by composing leftOp by rightComponent\n      var newLeftOp = [];\n      var k = 0;\n      while (k < leftOp.length) {\n        var nextC = [];\n        transformComponentX(leftOp[k], rightComponent, newLeftOp, nextC);\n        k++;\n\n        if (nextC.length === 1) {\n          rightComponent = nextC[0];\n        } else if (nextC.length === 0) {\n          for (var j = k; j < leftOp.length; j++) {\n            append(newLeftOp, leftOp[j]);\n          }\n          rightComponent = null;\n          break;\n        } else {\n          // Recurse.\n          var pair = transformX(leftOp.slice(k), nextC);\n          for (var l = 0; l < pair[0].length; l++) {\n            append(newLeftOp, pair[0][l]);\n          }\n          for (var r = 0; r < pair[1].length; r++) {\n            append(newRightOp, pair[1][r]);\n          }\n          rightComponent = null;\n          break;\n        }\n      }\n\n      if (rightComponent != null) {\n        append(newRightOp, rightComponent);\n      }\n      leftOp = newLeftOp;\n    }\n    return [leftOp, newRightOp];\n  };\n\n  // Transforms op with specified type ('left' or 'right') by otherOp.\n  type.transform = function(op, otherOp, type) {\n    if (!(type === 'left' || type === 'right'))\n      throw new Error(\"type must be 'left' or 'right'\");\n\n    if (otherOp.length === 0) return op;\n\n    if (op.length === 1 && otherOp.length === 1)\n      return transformComponent([], op[0], otherOp[0], type);\n\n    if (type === 'left')\n      return transformX(op, otherOp)[0];\n    else\n      return transformX(otherOp, op)[1];\n  };\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ot-json0/lib/bootstrapTransform.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}}],"sources":{"../node_modules/ot-json0/lib/bootstrapTransform.js":"// These methods let you build a transform function from a transformComponent\n// function for OT types like JSON0 in which operations are lists of components\n// and transforming them requires N^2 work. I find it kind of nasty that I need\n// this, but I'm not really sure what a better solution is. Maybe I should do\n// this automatically to types that don't have a compose function defined.\n\n// Add transform and transformX functions for an OT type which has\n// transformComponent defined.  transformComponent(destination array,\n// component, other component, side)\nmodule.exports = bootstrapTransform\nfunction bootstrapTransform(type, transformComponent, checkValidOp, append) {\n  var transformComponentX = function(left, right, destLeft, destRight) {\n    transformComponent(destLeft, left, right, 'left');\n    transformComponent(destRight, right, left, 'right');\n  };\n\n  var transformX = type.transformX = function(leftOp, rightOp) {\n    checkValidOp(leftOp);\n    checkValidOp(rightOp);\n    var newRightOp = [];\n\n    for (var i = 0; i < rightOp.length; i++) {\n      var rightComponent = rightOp[i];\n\n      // Generate newLeftOp by composing leftOp by rightComponent\n      var newLeftOp = [];\n      var k = 0;\n      while (k < leftOp.length) {\n        var nextC = [];\n        transformComponentX(leftOp[k], rightComponent, newLeftOp, nextC);\n        k++;\n\n        if (nextC.length === 1) {\n          rightComponent = nextC[0];\n        } else if (nextC.length === 0) {\n          for (var j = k; j < leftOp.length; j++) {\n            append(newLeftOp, leftOp[j]);\n          }\n          rightComponent = null;\n          break;\n        } else {\n          // Recurse.\n          var pair = transformX(leftOp.slice(k), nextC);\n          for (var l = 0; l < pair[0].length; l++) {\n            append(newLeftOp, pair[0][l]);\n          }\n          for (var r = 0; r < pair[1].length; r++) {\n            append(newRightOp, pair[1][r]);\n          }\n          rightComponent = null;\n          break;\n        }\n      }\n\n      if (rightComponent != null) {\n        append(newRightOp, rightComponent);\n      }\n      leftOp = newLeftOp;\n    }\n    return [leftOp, newRightOp];\n  };\n\n  // Transforms op with specified type ('left' or 'right') by otherOp.\n  type.transform = function(op, otherOp, type) {\n    if (!(type === 'left' || type === 'right'))\n      throw new Error(\"type must be 'left' or 'right'\");\n\n    if (otherOp.length === 0) return op;\n\n    if (op.length === 1 && otherOp.length === 1)\n      return transformComponent([], op[0], otherOp[0], type);\n\n    if (type === 'left')\n      return transformX(op, otherOp)[0];\n    else\n      return transformX(otherOp, op)[1];\n  };\n};\n"},"lineCount":79}},"error":null,"hash":"99a3b3c9df9290420a05a8750fd2b277","cacheData":{"env":{}}}